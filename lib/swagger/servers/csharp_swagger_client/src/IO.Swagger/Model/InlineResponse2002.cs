/* 
 * Skycoin REST API.
 *
 * Skycoin is a next-generation cryptocurrency.
 *
 * OpenAPI spec version: 0.25.0
 * Contact: skycoin.doe@example.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// InlineResponse2002
    /// </summary>
    [DataContract]
    public partial class InlineResponse2002 :  IEquatable<InlineResponse2002>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponse2002" /> class.
        /// </summary>
        /// <param name="Blockchain">Blockchain.</param>
        /// <param name="Coin">Coin.</param>
        /// <param name="CspEnabled">CspEnabled.</param>
        /// <param name="CsrfEnabled">CsrfEnabled.</param>
        /// <param name="GuiEnabled">GuiEnabled.</param>
        /// <param name="IncomingConnections">IncomingConnections.</param>
        /// <param name="JsonRpcEnabled">JsonRpcEnabled.</param>
        /// <param name="OpenConnections">OpenConnections.</param>
        /// <param name="OutgoingConnections">OutgoingConnections.</param>
        /// <param name="StartedAt">StartedAt.</param>
        /// <param name="UnconfirmedVerifyTransaction">UnconfirmedVerifyTransaction.</param>
        /// <param name="UnversionedApiEnabled">UnversionedApiEnabled.</param>
        /// <param name="Uptime">Uptime.</param>
        /// <param name="UserAgent">UserAgent.</param>
        /// <param name="UserVerifyTransaction">UserVerifyTransaction.</param>
        /// <param name="Version">Version.</param>
        /// <param name="WalletApiEnabled">WalletApiEnabled.</param>
        public InlineResponse2002(InlineResponse2002Blockchain Blockchain = default(InlineResponse2002Blockchain), string Coin = default(string), bool? CspEnabled = default(bool?), bool? CsrfEnabled = default(bool?), bool? GuiEnabled = default(bool?), long? IncomingConnections = default(long?), bool? JsonRpcEnabled = default(bool?), long? OpenConnections = default(long?), long? OutgoingConnections = default(long?), long? StartedAt = default(long?), InlineResponse2002UnconfirmedVerifyTransaction UnconfirmedVerifyTransaction = default(InlineResponse2002UnconfirmedVerifyTransaction), bool? UnversionedApiEnabled = default(bool?), string Uptime = default(string), string UserAgent = default(string), InlineResponse2002UnconfirmedVerifyTransaction UserVerifyTransaction = default(InlineResponse2002UnconfirmedVerifyTransaction), InlineResponse2002Version Version = default(InlineResponse2002Version), bool? WalletApiEnabled = default(bool?))
        {
            this.Blockchain = Blockchain;
            this.Coin = Coin;
            this.CspEnabled = CspEnabled;
            this.CsrfEnabled = CsrfEnabled;
            this.GuiEnabled = GuiEnabled;
            this.IncomingConnections = IncomingConnections;
            this.JsonRpcEnabled = JsonRpcEnabled;
            this.OpenConnections = OpenConnections;
            this.OutgoingConnections = OutgoingConnections;
            this.StartedAt = StartedAt;
            this.UnconfirmedVerifyTransaction = UnconfirmedVerifyTransaction;
            this.UnversionedApiEnabled = UnversionedApiEnabled;
            this.Uptime = Uptime;
            this.UserAgent = UserAgent;
            this.UserVerifyTransaction = UserVerifyTransaction;
            this.Version = Version;
            this.WalletApiEnabled = WalletApiEnabled;
        }
        
        /// <summary>
        /// Gets or Sets Blockchain
        /// </summary>
        [DataMember(Name="blockchain", EmitDefaultValue=false)]
        public InlineResponse2002Blockchain Blockchain { get; set; }

        /// <summary>
        /// Gets or Sets Coin
        /// </summary>
        [DataMember(Name="coin", EmitDefaultValue=false)]
        public string Coin { get; set; }

        /// <summary>
        /// Gets or Sets CspEnabled
        /// </summary>
        [DataMember(Name="csp_enabled", EmitDefaultValue=false)]
        public bool? CspEnabled { get; set; }

        /// <summary>
        /// Gets or Sets CsrfEnabled
        /// </summary>
        [DataMember(Name="csrf_enabled", EmitDefaultValue=false)]
        public bool? CsrfEnabled { get; set; }

        /// <summary>
        /// Gets or Sets GuiEnabled
        /// </summary>
        [DataMember(Name="gui_enabled", EmitDefaultValue=false)]
        public bool? GuiEnabled { get; set; }

        /// <summary>
        /// Gets or Sets IncomingConnections
        /// </summary>
        [DataMember(Name="incoming_connections", EmitDefaultValue=false)]
        public long? IncomingConnections { get; set; }

        /// <summary>
        /// Gets or Sets JsonRpcEnabled
        /// </summary>
        [DataMember(Name="json_rpc_enabled", EmitDefaultValue=false)]
        public bool? JsonRpcEnabled { get; set; }

        /// <summary>
        /// Gets or Sets OpenConnections
        /// </summary>
        [DataMember(Name="open_connections", EmitDefaultValue=false)]
        public long? OpenConnections { get; set; }

        /// <summary>
        /// Gets or Sets OutgoingConnections
        /// </summary>
        [DataMember(Name="outgoing_connections", EmitDefaultValue=false)]
        public long? OutgoingConnections { get; set; }

        /// <summary>
        /// Gets or Sets StartedAt
        /// </summary>
        [DataMember(Name="started_at", EmitDefaultValue=false)]
        public long? StartedAt { get; set; }

        /// <summary>
        /// Gets or Sets UnconfirmedVerifyTransaction
        /// </summary>
        [DataMember(Name="unconfirmed_verify_transaction", EmitDefaultValue=false)]
        public InlineResponse2002UnconfirmedVerifyTransaction UnconfirmedVerifyTransaction { get; set; }

        /// <summary>
        /// Gets or Sets UnversionedApiEnabled
        /// </summary>
        [DataMember(Name="unversioned_api_enabled", EmitDefaultValue=false)]
        public bool? UnversionedApiEnabled { get; set; }

        /// <summary>
        /// Gets or Sets Uptime
        /// </summary>
        [DataMember(Name="uptime", EmitDefaultValue=false)]
        public string Uptime { get; set; }

        /// <summary>
        /// Gets or Sets UserAgent
        /// </summary>
        [DataMember(Name="user_agent", EmitDefaultValue=false)]
        public string UserAgent { get; set; }

        /// <summary>
        /// Gets or Sets UserVerifyTransaction
        /// </summary>
        [DataMember(Name="user_verify_transaction", EmitDefaultValue=false)]
        public InlineResponse2002UnconfirmedVerifyTransaction UserVerifyTransaction { get; set; }

        /// <summary>
        /// Gets or Sets Version
        /// </summary>
        [DataMember(Name="version", EmitDefaultValue=false)]
        public InlineResponse2002Version Version { get; set; }

        /// <summary>
        /// Gets or Sets WalletApiEnabled
        /// </summary>
        [DataMember(Name="wallet_api_enabled", EmitDefaultValue=false)]
        public bool? WalletApiEnabled { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InlineResponse2002 {\n");
            sb.Append("  Blockchain: ").Append(Blockchain).Append("\n");
            sb.Append("  Coin: ").Append(Coin).Append("\n");
            sb.Append("  CspEnabled: ").Append(CspEnabled).Append("\n");
            sb.Append("  CsrfEnabled: ").Append(CsrfEnabled).Append("\n");
            sb.Append("  GuiEnabled: ").Append(GuiEnabled).Append("\n");
            sb.Append("  IncomingConnections: ").Append(IncomingConnections).Append("\n");
            sb.Append("  JsonRpcEnabled: ").Append(JsonRpcEnabled).Append("\n");
            sb.Append("  OpenConnections: ").Append(OpenConnections).Append("\n");
            sb.Append("  OutgoingConnections: ").Append(OutgoingConnections).Append("\n");
            sb.Append("  StartedAt: ").Append(StartedAt).Append("\n");
            sb.Append("  UnconfirmedVerifyTransaction: ").Append(UnconfirmedVerifyTransaction).Append("\n");
            sb.Append("  UnversionedApiEnabled: ").Append(UnversionedApiEnabled).Append("\n");
            sb.Append("  Uptime: ").Append(Uptime).Append("\n");
            sb.Append("  UserAgent: ").Append(UserAgent).Append("\n");
            sb.Append("  UserVerifyTransaction: ").Append(UserVerifyTransaction).Append("\n");
            sb.Append("  Version: ").Append(Version).Append("\n");
            sb.Append("  WalletApiEnabled: ").Append(WalletApiEnabled).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineResponse2002);
        }

        /// <summary>
        /// Returns true if InlineResponse2002 instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineResponse2002 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponse2002 input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Blockchain == input.Blockchain ||
                    (this.Blockchain != null &&
                    this.Blockchain.Equals(input.Blockchain))
                ) && 
                (
                    this.Coin == input.Coin ||
                    (this.Coin != null &&
                    this.Coin.Equals(input.Coin))
                ) && 
                (
                    this.CspEnabled == input.CspEnabled ||
                    (this.CspEnabled != null &&
                    this.CspEnabled.Equals(input.CspEnabled))
                ) && 
                (
                    this.CsrfEnabled == input.CsrfEnabled ||
                    (this.CsrfEnabled != null &&
                    this.CsrfEnabled.Equals(input.CsrfEnabled))
                ) && 
                (
                    this.GuiEnabled == input.GuiEnabled ||
                    (this.GuiEnabled != null &&
                    this.GuiEnabled.Equals(input.GuiEnabled))
                ) && 
                (
                    this.IncomingConnections == input.IncomingConnections ||
                    (this.IncomingConnections != null &&
                    this.IncomingConnections.Equals(input.IncomingConnections))
                ) && 
                (
                    this.JsonRpcEnabled == input.JsonRpcEnabled ||
                    (this.JsonRpcEnabled != null &&
                    this.JsonRpcEnabled.Equals(input.JsonRpcEnabled))
                ) && 
                (
                    this.OpenConnections == input.OpenConnections ||
                    (this.OpenConnections != null &&
                    this.OpenConnections.Equals(input.OpenConnections))
                ) && 
                (
                    this.OutgoingConnections == input.OutgoingConnections ||
                    (this.OutgoingConnections != null &&
                    this.OutgoingConnections.Equals(input.OutgoingConnections))
                ) && 
                (
                    this.StartedAt == input.StartedAt ||
                    (this.StartedAt != null &&
                    this.StartedAt.Equals(input.StartedAt))
                ) && 
                (
                    this.UnconfirmedVerifyTransaction == input.UnconfirmedVerifyTransaction ||
                    (this.UnconfirmedVerifyTransaction != null &&
                    this.UnconfirmedVerifyTransaction.Equals(input.UnconfirmedVerifyTransaction))
                ) && 
                (
                    this.UnversionedApiEnabled == input.UnversionedApiEnabled ||
                    (this.UnversionedApiEnabled != null &&
                    this.UnversionedApiEnabled.Equals(input.UnversionedApiEnabled))
                ) && 
                (
                    this.Uptime == input.Uptime ||
                    (this.Uptime != null &&
                    this.Uptime.Equals(input.Uptime))
                ) && 
                (
                    this.UserAgent == input.UserAgent ||
                    (this.UserAgent != null &&
                    this.UserAgent.Equals(input.UserAgent))
                ) && 
                (
                    this.UserVerifyTransaction == input.UserVerifyTransaction ||
                    (this.UserVerifyTransaction != null &&
                    this.UserVerifyTransaction.Equals(input.UserVerifyTransaction))
                ) && 
                (
                    this.Version == input.Version ||
                    (this.Version != null &&
                    this.Version.Equals(input.Version))
                ) && 
                (
                    this.WalletApiEnabled == input.WalletApiEnabled ||
                    (this.WalletApiEnabled != null &&
                    this.WalletApiEnabled.Equals(input.WalletApiEnabled))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Blockchain != null)
                    hashCode = hashCode * 59 + this.Blockchain.GetHashCode();
                if (this.Coin != null)
                    hashCode = hashCode * 59 + this.Coin.GetHashCode();
                if (this.CspEnabled != null)
                    hashCode = hashCode * 59 + this.CspEnabled.GetHashCode();
                if (this.CsrfEnabled != null)
                    hashCode = hashCode * 59 + this.CsrfEnabled.GetHashCode();
                if (this.GuiEnabled != null)
                    hashCode = hashCode * 59 + this.GuiEnabled.GetHashCode();
                if (this.IncomingConnections != null)
                    hashCode = hashCode * 59 + this.IncomingConnections.GetHashCode();
                if (this.JsonRpcEnabled != null)
                    hashCode = hashCode * 59 + this.JsonRpcEnabled.GetHashCode();
                if (this.OpenConnections != null)
                    hashCode = hashCode * 59 + this.OpenConnections.GetHashCode();
                if (this.OutgoingConnections != null)
                    hashCode = hashCode * 59 + this.OutgoingConnections.GetHashCode();
                if (this.StartedAt != null)
                    hashCode = hashCode * 59 + this.StartedAt.GetHashCode();
                if (this.UnconfirmedVerifyTransaction != null)
                    hashCode = hashCode * 59 + this.UnconfirmedVerifyTransaction.GetHashCode();
                if (this.UnversionedApiEnabled != null)
                    hashCode = hashCode * 59 + this.UnversionedApiEnabled.GetHashCode();
                if (this.Uptime != null)
                    hashCode = hashCode * 59 + this.Uptime.GetHashCode();
                if (this.UserAgent != null)
                    hashCode = hashCode * 59 + this.UserAgent.GetHashCode();
                if (this.UserVerifyTransaction != null)
                    hashCode = hashCode * 59 + this.UserVerifyTransaction.GetHashCode();
                if (this.Version != null)
                    hashCode = hashCode * 59 + this.Version.GetHashCode();
                if (this.WalletApiEnabled != null)
                    hashCode = hashCode * 59 + this.WalletApiEnabled.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
