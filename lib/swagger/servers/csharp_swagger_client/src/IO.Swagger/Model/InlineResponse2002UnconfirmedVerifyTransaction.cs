/* 
 * Skycoin REST API.
 *
 * Skycoin is a next-generation cryptocurrency.
 *
 * OpenAPI spec version: 0.25.0
 * Contact: skycoin.doe@example.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// InlineResponse2002UnconfirmedVerifyTransaction
    /// </summary>
    [DataContract]
    public partial class InlineResponse2002UnconfirmedVerifyTransaction :  IEquatable<InlineResponse2002UnconfirmedVerifyTransaction>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponse2002UnconfirmedVerifyTransaction" /> class.
        /// </summary>
        /// <param name="BurnFactor">BurnFactor.</param>
        /// <param name="MaxDecimal">MaxDecimal.</param>
        /// <param name="MaxTransactionSize">MaxTransactionSize.</param>
        public InlineResponse2002UnconfirmedVerifyTransaction(long? BurnFactor = default(long?), long? MaxDecimal = default(long?), long? MaxTransactionSize = default(long?))
        {
            this.BurnFactor = BurnFactor;
            this.MaxDecimal = MaxDecimal;
            this.MaxTransactionSize = MaxTransactionSize;
        }
        
        /// <summary>
        /// Gets or Sets BurnFactor
        /// </summary>
        [DataMember(Name="burn_factor", EmitDefaultValue=false)]
        public long? BurnFactor { get; set; }

        /// <summary>
        /// Gets or Sets MaxDecimal
        /// </summary>
        [DataMember(Name="max_decimal", EmitDefaultValue=false)]
        public long? MaxDecimal { get; set; }

        /// <summary>
        /// Gets or Sets MaxTransactionSize
        /// </summary>
        [DataMember(Name="max_transaction_size", EmitDefaultValue=false)]
        public long? MaxTransactionSize { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InlineResponse2002UnconfirmedVerifyTransaction {\n");
            sb.Append("  BurnFactor: ").Append(BurnFactor).Append("\n");
            sb.Append("  MaxDecimal: ").Append(MaxDecimal).Append("\n");
            sb.Append("  MaxTransactionSize: ").Append(MaxTransactionSize).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineResponse2002UnconfirmedVerifyTransaction);
        }

        /// <summary>
        /// Returns true if InlineResponse2002UnconfirmedVerifyTransaction instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineResponse2002UnconfirmedVerifyTransaction to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponse2002UnconfirmedVerifyTransaction input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.BurnFactor == input.BurnFactor ||
                    (this.BurnFactor != null &&
                    this.BurnFactor.Equals(input.BurnFactor))
                ) && 
                (
                    this.MaxDecimal == input.MaxDecimal ||
                    (this.MaxDecimal != null &&
                    this.MaxDecimal.Equals(input.MaxDecimal))
                ) && 
                (
                    this.MaxTransactionSize == input.MaxTransactionSize ||
                    (this.MaxTransactionSize != null &&
                    this.MaxTransactionSize.Equals(input.MaxTransactionSize))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.BurnFactor != null)
                    hashCode = hashCode * 59 + this.BurnFactor.GetHashCode();
                if (this.MaxDecimal != null)
                    hashCode = hashCode * 59 + this.MaxDecimal.GetHashCode();
                if (this.MaxTransactionSize != null)
                    hashCode = hashCode * 59 + this.MaxTransactionSize.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
